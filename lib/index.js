// Generated by CoffeeScript 1.6.2
(function() {
  var MarkdownParser, YParser, bnf,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  YParser = require("yparser");

  bnf = require('./bnf.js');

  MarkdownParser = (function(_super) {
    __extends(MarkdownParser, _super);

    function MarkdownParser() {
      var gram, parser;

      MarkdownParser.__super__.constructor.call(this);
      gram = new YParser.GrammarParser;
      gram.loadString(bnf);
      parser = gram.loadGrammar();
      this.grammars = parser.grammars;
    }

    MarkdownParser.prototype.extendGrammar = function(bnf) {
      var gram, grams, id, _results;

      gram = new YParser.GrammarParser;
      gram.loadString(bnf);
      grams = gram.loadGrammar().grammars;
      _results = [];
      for (id in grams) {
        gram = grams[id];
        _results.push(this.grammars[id] = gram);
      }
      return _results;
    };

    MarkdownParser.prototype.parseMarkdown = function(cb) {
      if ((this.execGrammar("main")) === false) {
        return cb.call(this, this.ast, false);
      }
      this.processLists();
      return cb.call(this, this.ast, true);
    };

    MarkdownParser.prototype.processLists = function() {
      var id, node, _i, _len, _ref, _results;

      _ref = this.ast.nodes;
      _results = [];
      for (id = _i = 0, _len = _ref.length; _i < _len; id = ++_i) {
        node = _ref[id];
        if (node.type !== 'list') {
          continue;
        }
        _results.push(this.ast.nodes[id] = (this.processList(node))[0]);
      }
      return _results;
    };

    MarkdownParser.prototype.processList = function(list, id) {
      var lastLevel, newList, node, ret;

      if (id == null) {
        id = 0;
      }
      newList = this.createList();
      lastLevel = list.nodes[id].level;
      while (list.nodes[id] != null) {
        node = list.nodes[id];
        if (node.level.length < lastLevel.length) {
          return [newList, id];
        }
        if (node.level.length > lastLevel.length) {
          ret = this.processList(list, id);
          newList.nodes.push(this.createListItem([ret[0]]));
          id = ret[1];
          continue;
        }
        newList.nodes.push(node);
        id++;
      }
      return [newList, id];
    };

    MarkdownParser.prototype.createList = function() {
      return {
        type: "list",
        nodes: new Array
      };
    };

    MarkdownParser.prototype.createListItem = function(nodes) {
      return {
        type: "item",
        nodes: nodes
      };
    };

    return MarkdownParser;

  })(YParser.AstParser);

  MarkdownParser.YParser = YParser;

  module.exports = MarkdownParser;

}).call(this);
